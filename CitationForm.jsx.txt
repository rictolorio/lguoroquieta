import React, { useState, useEffect } from "react";
import Select from "react-select"; // Import react-select for multi-select dropdown

const CitationForm = () => {
  const [violations, setViolations] = useState([]);
  const [selectedViolations, setSelectedViolations] = useState([]);
  const [formData, setFormData] = useState({
    citation_no: "",
    full_name: "",
    birthday: "",
    gender: "",
    age: "",
    full_address: "",
    driv_lic: "",
    exp_date: "",
    reg_owner: "",
    reg_address: "",
    veh_type: "",
    plate_no: "",
    crt_reg_no: "",
    franc_no: "",
    place_of_viola: "",
    date_of_viola: "",
    time_of_viola: "",
    amounts: "",
    remarks: "",
    app_officer: "",   

    violations: [],
  });

  // Fetch violations from API
  useEffect(() => {
    fetch("http://127.0.0.1:8000/violations/")
      .then((res) => res.json())
      .then((data) => {
        const formattedViolations = data.map((v) => ({
          value: v.id,
          label: `${v.or_sec_no} - ${v.descriptions}`,
        }));
        setViolations(formattedViolations);
      })
      .catch((error) => console.error("Error fetching violations:", error));
  }, []);

  // Handle dropdown selection
  const handleViolationChange = (selectedOptions) => {
    setSelectedViolations(selectedOptions);
    setFormData({
      ...formData,
      violations: selectedOptions.map((option) => option.value), // Store only the IDs
    });
  };

  // Handle form input change
  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log("Submitting Data:", formData);

    try {
      const response = await fetch("http://127.0.0.1:8000/citations/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        alert("Citation added successfully!");
        // Reset form after submission
        setFormData({
          citation_no: "",
          full_name: "",
          birthday: "",
          gender: "",
          age: "",
          full_address:"",
          driv_lic: "",
          exp_date:"",
          reg_owner:"",
          reg_address: "",
          veh_type:"",
          plate_no:"",
          crt_reg_no:"",
          franc_no:"",
          place_of_viola:"",
          date_of_viola: "",
          time_of_viola: "",
          amounts: "",
          remarks: "",
          app_officer: "",
          violations: [],
        });
        setSelectedViolations([]); // Clear the selected violations
      } else {
        const errorData = await response.json();
        alert(`Error: ${errorData.message || "Failed to add citation"}`);
      }
    } catch (error) {
      console.error("Error submitting form:", error);
      alert("Error submitting form. Check the console for details.");
    }
  };

  return (
    
    <div className="max-w-lg mx-auto bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-xl font-bold mb-4">Add Citation</h2>

      <form onSubmit={handleSubmit} className="space-y-4 text-orange-500">
    <div>
        <div className="mb-4">
          <label className="block text-gray-700">Citation No</label>
          <input
            type="text"
            name="citation_no"
            value={formData.citation_no}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Full Name</label>
          <input
            type="text"
            name="full_name"
            value={formData.full_name}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Birthday</label>
          <input
            type="date"
            name="birthday"
            value={formData.birthday || ''}  // Ensures empty values work
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="p-4">
          {/* Gender Dropdown */}
          <div className="mb-4">
            <label className="block text-gray-700">Gender</label>
            <select
              name="gender"
              value={formData.gender}
              onChange={handleInputChange}
              className="w-full p-2 border rounded"
            >
              <option value="">Select Gender</option>
              <option value="Male">Male</option>
              <option value="Female">Female</option>
            </select>
          </div>
        </div>   

        <div className="mb-4">
          <label className="block text-gray-700">Age</label>
          <input
            type="number"
            name="age"
            value={formData.age || 0}  // Ensures empty values work
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Full Address</label>
          <input
            type="text"
            name="full_address"
            value={formData.full_address}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Driver's License</label>
          <input
            type="text"
            name="driv_lic"
            value={formData.driv_lic}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Expiration Date</label>
          <input
            type="date"
            name="exp_date"
            value={formData.exp_date || ""}
            onChange={handleInputChange}
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Registered Owner</label>
          <input
            type="text"
            name="reg_owner"
            value={formData.reg_owner}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Registered Address</label>
          <input
            type="text"
            name="reg_address"
            value={formData.reg_address}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Vehicle Type</label>
          <input
            type="text"
            name="veh_type"
            value={formData.veh_type}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Plate No.</label>
          <input
            type="text"
            name="plate_no"
            value={formData.plate_no}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Certificate of Registration No.</label>
          <input
            type="text"
            name="crt_reg_no"
            value={formData.crt_reg_no}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Franchise No.</label>
          <input
            type="text"
            name="franc_no"
            value={formData.franc_no}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Place of Violation</label>
          <input
            type="text"
            name="place_of_viola"
            value={formData.place_of_viola}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Date of Violation</label>
          <input
            type="date"
            name="date_of_viola"
            value={formData.date_of_viola || ""}  // Ensures empty values work
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Time of Violation</label>
          <input
            type="time"
            name="time_of_viola"
            value={formData.time_of_viola || ''}  // Ensures empty values work
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Amounts</label>
          <input
            type="number"
            name="amounts"
            value={formData.amounts}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Remarks</label>
          <input
            type="text"
            name="remarks"
            value={formData.remarks}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Apprehending Officer</label>
          <input
            type="text"
            name="app_officer"
            value={formData.app_officer}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          />
        </div> 

        <div className="mb-4">
          <label className="block text-gray-700">List of Violations</label>
          <Select
            options={violations}
            isMulti
            value={selectedViolations}
            onChange={handleViolationChange}
            className="w-full"
          />
        </div>
      </div>

        <button
          type="submit"
          className="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600"
        >
          Submit
        </button>
      </form>
    </div>
  );
};

export default CitationForm;

------------------------------------

CitationList.jsx


import React, { useState, useEffect } from "react";

const CitationList = ({ onEdit, refresh }) => {
  console.log("onEdit function:", onEdit); // Debugging

  if (!onEdit) {
    console.error("Error: onEdit prop is missing in CitationList.");
  }
  const [citations, setCitations] = useState([]);

  // Fetch citations when component loads or refresh is triggered
  useEffect(() => {
    fetchCitations();
  }, [refresh]);

  const fetchCitations = async () => {
    try {
      const response = await fetch("http://127.0.0.1:8000/citations/");
      if (!response.ok) throw new Error("Failed to fetch citations");

      const data = await response.json();
      if (data.length === 0) {
        console.warn("No citations found in the database.");
      }

      setCitations(data);
    } catch (error) {
      console.error("Error fetching citations:", error);
    }
  };

  // DELETE Citation
  const deleteCitation = async (citation_no) => {
    if (!window.confirm("Are you sure you want to delete this citation?")) return;

    try {
      const response = await fetch(`http://127.0.0.1:8000/citations/${citation_no}/`, { method: "DELETE" });
      if (!response.ok) throw new Error("Failed to delete citation");

      setCitations(citations.filter((citation) => citation.citation_no !== citation_no));
      alert("Citation deleted successfully!");
    } catch (error) {
      console.error("Error deleting citation:", error);
      alert("Error deleting citation.");
    }
  };

  return (
    <div className="max-w-auto mx-auto bg-white p-6 rounded-lg shadow-md mt-6">
      <h2 className="text-xl font-bold mb-4">Citation List</h2>
      {citations.length === 0 ? (
        <p className="text-gray-500">No citations found.</p>
      ) : (
        <table className="w-full border-collapse border border-gray-300">
          <thead>
            <tr className="bg-gray-200">
              <th className="border p-2">Citation No</th>
              <th className="border p-2">Full Name</th>
              <th className="border p-2">Birthday</th>
              <th className="border p-2">Gender</th>
              <th className="border p-2">Age</th>
              <th className="border p-2">Full Address</th>
              <th className="border p-2">Driver's License</th>
              <th className="border p-2">Expiration Date</th>
              <th className="border p-2">Registered Owner</th>
              <th className="border p-2">Registered Address</th>
              <th className="border p-2">Vehicle Type</th>
              <th className="border p-2">Plate No.</th>
              <th className="border p-2">Cert. Reg. No.</th>
              <th className="border p-2">Franchise No.</th>
              <th className="border p-2">Place of Violation</th>
              <th className="border p-2">Date of Violation</th>
              <th className="border p-2">Time of Violation</th>
              <th className="border p-2">Amounts</th>
              <th className="border p-2">Remarks</th>
              <th className="border p-2">Apprehending Officer</th>
              <th className="border p-2">Violations</th>
              <th className="border p-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {citations.map((citation) => (
              <tr key={citation.citation_no} className="text-center">
                <td className="border p-2">{citation.citation_no}</td>
                <td className="border p-2">{citation.full_name}</td>
                <td className="border p-2">{citation.birthday}</td>
                <td className="border p-2">{citation.gender}</td>
                <td className="border p-2">{citation.age}</td>
                <td className="border p-2">{citation.full_address}</td>
                <td className="border p-2">{citation.driv_lic}</td>
                <td className="border p-2">{citation.exp_date}</td>
                <td className="border p-2">{citation.reg_owner}</td>
                <td className="border p-2">{citation.reg_address}</td>
                <td className="border p-2">{citation.veh_type}</td>
                <td className="border p-2">{citation.plate_no}</td>
                <td className="border p-2">{citation.crt_reg_no}</td>
                <td className="border p-2">{citation.franc_no}</td>
                <td className="border p-2">{citation.place_of_viola}</td>
                <td className="border p-2">{citation.date_of_viola}</td>
                <td className="border p-2">{citation.time_of_viola}</td>
                <td className="border p-2">{citation.amounts}</td>
                <td className="border p-2">{citation.remarks}</td>
                <td className="border p-2">{citation.app_officer}</td>
                
                {/* Display Violations */}
                <td className="border p-2">
                    {citation.violations && citation.violations.length > 0 ? (
                      citation.violations.map((violation, index) => (
                        <span key={`${citation.citation_no}-${violation.id}-${index}`} className="bg-gray-200 p-1 rounded mx-1">
                          {violation.name}
                        </span>
                      ))
                    ) : (
                      "No Violations"
                    )}
                </td>


                <td className="border p-2">
                <button
                  onClick={() => {
                    if (typeof onEdit === "function") {
                      onEdit(citation);
                    } else {
                      console.error("onEdit is not a function!");
                    }
                  }}
                  className="bg-orange-500 text-white px-3 py-1 rounded"
                >
                  Edit
                </button>

                  <button
                    onClick={() => deleteCitation(citation.citation_no)}
                    className="bg-red-500 text-white px-3 py-1 rounded ml-2"
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default CitationList;

